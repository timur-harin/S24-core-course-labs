name: Test

on:
  pull_request:
    branches:
      - main
    paths:
      - app_python/**

defaults:
  run:
    working-directory: app_python

jobs:
  install_clear_test_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('app_python/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install poetry
        run: pipx install poetry
      
      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run pytest

      - name: Lint
        run: poetry run flake8 .

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('app_python/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-


      - name: Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./app_python
          file: ./app_python/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops:latest

  snyk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Snyk dependencies
        uses: actions/cache@v2
        with:
          path: ~/.local/snyk
          key: ${{ runner.os }}-snyk-${{ hashFiles('app_python/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-snyk-

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.10@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args:
            --sarif-file-output=snyk.sarif
            --package-manager=poetry
            --file=app_python/poetry.lock
            --skip-unresolved

      - name: Upload result to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif